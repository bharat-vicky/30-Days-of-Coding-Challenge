Problem statement
You are given an array ‘arr’ containing ‘n’ integers. You are also given an integer ‘num’, and your task is to find whether ‘num’ is present in the array or not.
If ‘num’ is present in the array, return the 0-based index of the first occurrence of ‘num’. Else, return -1.
Example:
Input: ‘n’ = 5, ‘num’ = 4 
'arr' =  [6,7,8,4,1] 

.....................................................................................................................................................................

int linearSearch(int n, int num, vector<int> &arr)
{
    for(int i=0; i<num; i++) {
        if(arr[i] == num) {
            return i;
        }
    }
    return -1;
}


.....................................................................................................................................................................
.....................................................................................................................................................................

Problem statement
Given two sorted arrays, ‘a’ and ‘b’, of size ‘n’ and ‘m’, respectively, return the union of the arrays.
The union of two sorted arrays can be defined as an array consisting of the common and the distinct elements of the two arrays. The final array should be sorted in ascending order.
Note: 'a' and 'b' may contain duplicate elements, but the union array must contain unique elements.
Example:
Input: ‘n’ = 5 ‘m’ = 3
‘a’ = [1, 2, 3, 4, 6]
‘b’ = [2, 3, 5]

.....................................................................................................................................................................

#include <bits/stdc++.h>
vector<int> sortedArray(vector<int> a, vector<int> b) {
  int n1 = a.size();
  int n2 = b.size();
  set<int> st;
  for (int i = 0; i < n1; i++) {
    st.insert(a[i]);
  }
  for (int i = 0; i < n2; i++) {
    st.insert(b[i]);
  }
  vector<int> temp;
  for (auto it : st) {
    temp.push_back(it);
  }
  return temp;
}

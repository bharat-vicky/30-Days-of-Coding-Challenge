Given an integer array nums, return the number of reverse pairs in the array.
A reverse pair is a pair (i, j) where:
0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
............................................................................................

class Solution {
public:
    int reversePairs(vector<int>& nums) {
        
        return mergeSort(nums, 0, nums.size() - 1);
    }

private:
    int mergeSort(vector<int>& nums, int start, int end) {
        if (start >= end) return 0;

        int mid = start + (end - start) / 2;
        int count = mergeSort(nums, start, mid) + mergeSort(nums, mid + 1, end);

        
        int j = mid + 1;
        for (int i = start; i <= mid; ++i) {
            while (j <= end && nums[i] > 2LL * nums[j]) {
                ++j;
            }
            count += (j - mid - 1);
        }

        
        vector<int> temp;
        int left = start, right = mid + 1;
        while (left <= mid && right <= end) {
            if (nums[left] <= nums[right]) {
                temp.push_back(nums[left++]);
            } else {
                temp.push_back(nums[right++]);
            }
        }
        while (left <= mid) {
            temp.push_back(nums[left++]);
        }
        while (right <= end) {
            temp.push_back(nums[right++]);
        }

        
        for (int i = 0; i < temp.size(); ++i) {
            nums[start + i] = temp[i];
        }

        return count;
    }
};

Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.
...............................................................................................

class Solution {
public:
    
    int findLeft(vector<int>& nums, int target) {
        int left = 0, right = nums.size() - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }

    
    int findRight(vector<int>& nums, int target) {
        int left = 0, right = nums.size() - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] <= target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return right;
    }

    
    vector<int> searchRange(vector<int>& nums, int target) {
        int leftIdx = findLeft(nums, target);
        int rightIdx = findRight(nums, target);
        
        
        if (leftIdx <= rightIdx && leftIdx < nums.size() && nums[leftIdx] == target) {
            return {leftIdx, rightIdx};
        }
        return {-1, -1};
    }
};
